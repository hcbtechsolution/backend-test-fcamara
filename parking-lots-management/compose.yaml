services:
  rabbitmq:
    image: rabbitmq:3.13.6-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      TZ: America/Sao_Paulo
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    hostname: rabbitmq
    networks:
      - app
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    tty: true
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  postgres:
    image: postgres:16.2-alpine3.19
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: establishment
      TZ: America/Sao_Paulo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 10s
      retries: 5
    hostname: postgres
    networks:
      - postgres
    ports:
      - 5432:5432
    restart: always
    tty: true
    volumes:
      - postgresql:/var/lib/postgresql/data

  mongo:
    image: mongo:7.0.5
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      TZ: America/Sao_Paulo
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 10s
      retries: 5
    hostname: mongo
    networks:
      - mongo
    ports:
      - 27017:27017
    restart: always
    tty: true
    volumes:
      - mongodb:/data/db

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: parking-control
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: America/Sao_Paulo
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 15s
      timeout: 10s
      retries: 5
    hostname: mysql
    networks:
      - mysql
    ports:
      - 3306:3306
    restart: always
    tty: true
    volumes:
      - mysql:/var/lib/mysql

  eureka-server:
    image: hcbtechsolutions/eureka-discovery-service
    build:
      context: ./eureka-discovery-service
      dockerfile: Dockerfile
    container_name: eureka-discovery-service
    environment:
      SPRING_SECURITY_USER_NAME: ${EUREKA_USER}
      SPRING_SECURITY_USER_PASSWORD: ${EUREKA_PASSWORD}
      TZ: America/Sao_Paulo
    healthcheck:
      test: "curl -fs localhost:8761/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 5
    hostname: eureka-discovery-service
    networks:
      - app
    ports:
      - 8761:8761
    restart: always
    tty: true

  api-gateway:
    image: hcbtechsolutions/api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://${EUREKA_USER}:${EUREKA_PASSWORD}@eureka-server:8761/eureka
      TZ: America/Sao_Paulo
    hostname: api-gateway
    networks:
      - app
    ports:
      - 8080:8080
    restart: always
    tty: true

  establishment-service:
    image: hcbtechsolutions/establishment-service
    build:
      context: ./establishment-service
      dockerfile: Dockerfile
    container_name: establishment-service
    depends_on:
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://${EUREKA_USER}:${EUREKA_PASSWORD}@eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/establishment
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      TZ: America/Sao_Paulo
    hostname: establishment-service
    networks:
      - postgres
      - app
    restart: always
    tty: true

  vehicle-service:
    image: hcbtechsolutions/vehicle-service
    build:
      context: ./vehicle-service
      dockerfile: Dockerfile
    container_name: vehicle-service
    depends_on:
      eureka-server:
        condition: service_healthy
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://${EUREKA_USER}:${EUREKA_PASSWORD}@eureka-server:8761/eureka
      SPRING_DATA_MONGODB_URI: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongo:27017/
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      TZ: America/Sao_Paulo
    hostname: vehicle-service
    networks:
      - mongo
      - app
    restart: always
    tty: true

  parking-control-service:
    image: hcbtechsolutions/parking-control-service
    build:
      context: ./parking-control-service
      dockerfile: Dockerfile
    container_name: parking-control-service
    depends_on:
      eureka-server:
        condition: service_healthy
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://${EUREKA_USER}:${EUREKA_PASSWORD}@eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/parking-control
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      TZ: America/Sao_Paulo
    hostname: parking-control-service
    networks:
      - mysql
      - app
    restart: always
    tty: true

networks:
  postgres:
    driver: bridge
  mongo:
    driver: bridge
  mysql:
    driver: bridge
  app:
    driver: bridge

volumes:
  postgresql:
  mongodb:
  mysql:
  rabbitmq:
